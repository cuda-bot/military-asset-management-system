// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  base_commander
  logistics_officer
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  role      Role     @default(logistics_officer)
  base_id   String?
  base      Base?    @relation(fields: [base_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  assignments Assignment[]
}

model Base {
  id        String   @id @default(cuid())
  name      String   @unique
  location  String
  users     User[]
  assets    Asset[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  purchases Purchase[]
  transfersFrom Transfer[] @relation("FromBase")
  transfersTo Transfer[] @relation("ToBase")
}

model EquipmentType {
  id     String  @id @default(cuid())
  name   String  @unique
  assets Asset[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum AssetStatus {
  in_storage
  in_use
  under_maintenance
  decommissioned
}

model Asset {
  id              String   @id @default(cuid())
  name            String
  serial_number   String   @unique
  type_id         String
  equipment_type  EquipmentType @relation(fields: [type_id], references: [id])
  base_id         String
  base            Base     @relation(fields: [base_id], references: [id])
  status          AssetStatus @default(in_storage)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  assignments     Assignment[]
  transfers       Transfer[]
  purchases       Purchase[]
  expenditures    Expenditure[]
}

model Purchase {
  id          String   @id @default(cuid())
  asset_id    String
  asset       Asset    @relation(fields: [asset_id], references: [id])
  base_id     String
  base        Base     @relation(fields: [base_id], references: [id])
  vendor      String
  cost        Float
  purchase_date DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Transfer {
  id              String   @id @default(cuid())
  asset_id        String
  asset           Asset    @relation(fields: [asset_id], references: [id])
  from_base_id    String
  from_base       Base     @relation("FromBase", fields: [from_base_id], references: [id])
  to_base_id      String
  to_base         Base     @relation("ToBase", fields: [to_base_id], references: [id])
  transfer_date   DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Assignment {
  id              String   @id @default(cuid())
  asset_id        String
  asset           Asset    @relation(fields: [asset_id], references: [id])
  user_id         String
  user            User     @relation(fields: [user_id], references: [id])
  assignment_date DateTime
  return_date     DateTime?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Expenditure {
  id              String   @id @default(cuid())
  asset_id        String
  asset           Asset    @relation(fields: [asset_id], references: [id])
  description     String
  amount          Float
  expenditure_date DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}
